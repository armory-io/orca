/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
  id "com.jfrog.artifactory" version "5.+"
  id 'io.spinnaker.project' version "$spinnakerGradleVersion" apply false
  id "org.jetbrains.kotlin.jvm" version "$kotlinVersion" apply false
  id "org.jetbrains.kotlin.plugin.allopen" version "$kotlinVersion" apply false
  id "io.gitlab.arturbosch.detekt" version "1.17.1" apply false
  id "org.jetbrains.dokka" version "1.4.32" apply false
}

allprojects {
  apply plugin: 'io.spinnaker.project'
  apply plugin: 'com.jfrog.artifactory'
  group = "io.spinnaker.orca"

  tasks.withType(JavaExec) {
    if (System.getProperty('DEBUG', 'false') == 'true') {
      jvmArgs '-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8183'
    }
  }
}
artifactory {
  contextUrl = "https://armory.jfrog.io/armory"
  //The base Artifactory URL if not overridden by the publisher/resolver
  publish {
    repository {
      repoKey = "armory-gradle-local"
      username = "${artifactory_user}"
      password = "${artifactory_password}"
    }
    defaults {
      publications('ALL_PUBLICATIONS')
      publishPom = true // Publish generated POM files to Artifactory (true by default)
    }

  }

  clientConfig.info.setBuildNumber(getProperties().get("JFROG_CLI_BUILD_NUMBER", project.getVersion()).toString())

}
artifactoryPublish.skip=true
subprojects {
  apply plugin: 'maven-publish'
  repositories {
    maven {
      url 'https://armory.jfrog.io/armory/armory-gradle-local'
      credentials {
        username = "${artifactory_user}"
        password = "${artifactory_password}"
      }
    }
  }
  if ([korkVersion, fiatVersion].any { it.endsWith("-SNAPSHOT") }) {
    logger.info("Enabling mavenLocal")
    repositories {
      mavenLocal()
    }
  }

  if (name != "orca-bom" && name != "orca-api") {
    apply plugin: "java-library"

    dependencies {
      implementation(enforcedPlatform("io.spinnaker.kork:kork-bom:$korkVersion"))
      annotationProcessor(platform("io.spinnaker.kork:kork-bom:$korkVersion"))
      testAnnotationProcessor(platform("io.spinnaker.kork:kork-bom:$korkVersion"))
      implementation("org.slf4j:slf4j-api")
    }

    configurations.all {
      exclude group: "javax.servlet", module: "servlet-api"
    }

    test {
      testLogging {
        exceptionFormat = "full"
      }
    }

    def licenseExtension = project.extensions.findByName('license')
    if (licenseExtension != null) {
      licenseExtension.exclude "**/*.json"
      licenseExtension.exclude "**/*.md"
      licenseExtension.exclude "**/*.yml"
      licenseExtension.mapping {
        java = "SLASHSTAR_STYLE"
        kt = "SLASHSTAR_STYLE"
      }
    }
  }
}

defaultTasks ":orca-web:run"
