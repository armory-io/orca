name: Release

on:
  push:
    tags:
    - "v[0-9]+.[0-9]+.[0-9]+"
    - "v[0-9]+.[0-9]+.[0-9]+-rc.[0-9]+"

env:
  GRADLE_OPTS: -Dorg.gradle.daemon=false -Xmx6g -Xms6g -Dorg.gradle.internal.http.socketTimeout=120000 -Dorg.gradle.internal.http.connectionTimeout=120000 -Dorg.gradle.internal.remote.repository.deploy.max.attempts=6
  CONTAINER_REGISTRY: us-docker.pkg.dev/spinnaker-community/docker
  JFROG_ARGS: --fail=false --url https://armory.jfrog.io/armory/ --user ${{secrets.ARTIFACTORY_USER}} --password ${{secrets.ARTIFACTORY_PASSWORD}}
  GRADLE_ARGS: -Partifactory_user=${{secrets.ARTIFACTORY_USER}} -Partifactory_password=${{secrets.ARTIFACTORY_PASSWORD}}
jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      # Given a tag, determine what branch we are on, so we can bump dependencies in the correct branch
      - name: Get Branch
        run: |
          BRANCHES=$(git branch -r --contains ${{ github.ref }})
          echo "BRANCHES is '${BRANCHES}'"
          # Check for no branches explicitly...Otherwise echo adds a newline so wc thinks there's
          # one branch.  And echo -n makes it appears that there's one less branch than there
          # actually is.
          if [ -z "$BRANCHES" ]; then
            echo "exactly one branch required to release orca, but there are none"
            exit 1
          fi
          NUM_BRANCHES=$(($(echo "$BRANCHES" | wc -l)))
          echo "NUM_BRANCHES is '${NUM_BRANCHES}'"
          if [ $NUM_BRANCHES -ne 1 ]; then
            echo "exactly one branch required to release orca, but there are $NUM_BRANCHES ($BRANCHES)"
            exit 1
          fi
          echo "exactly one branch ($BRANCHES)"
          echo BRANCH=$BRANCHES >> $GITHUB_ENV
      - uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: 'zulu'
          cache: 'gradle'
      - name: Assemble release info
        id: release_info
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          . .github/workflows/release_info.sh ${{ github.event.repository.full_name }}
          echo CHANGELOG=$(echo -e "${CHANGELOG}") >> $GITHUB_OUTPUT
          echo SKIP_RELEASE="${SKIP_RELEASE}" >> $GITHUB_OUTPUT
          echo IS_CANDIDATE="${IS_CANDIDATE}" >> $GITHUB_OUTPUT
          echo RELEASE_VERSION="${RELEASE_VERSION}" >> $GITHUB_OUTPUT
      - name: Publish Release
        run: |
          ./gradlew test artifactoryPublish $GRADLE_ARGS -Pversion=0.0.3
          BUILD_NUMBER=$(./gradlew -Prelease.useLastTag=true $GRADLE_ARGS  printVersion|grep VERSION|awk -F: '{print $2}')
          echo "Running build scan against $BUILD_NUMBER"
          jfrog rt bs "kork" "$BUILD_NUMBER" $JFROG_ARGS

